#include <iostream>
#include <vector>
using namespace std;

bool isSafe(vector<vector<int>>& board, int row, int col, int n) {
    // Check left side of the row
    for (int i = 0; i < col; i++) {
        if (board[row][i] == 1) {
            return false;
        }
    }
    // Check upper diagonal on left side
    for (int i = row, j = col; i >= 0 && j >= 0; i--, j--) {
        if (board[i][j] == 1) {
            return false;
        }
    }
    // Check lower diagonal on left side
    for (int i = row, j = col; i < n && j >= 0; i++, j--) {
        if (board[i][j] == 1) {
            return false;
        }
    }
    return true;
}

bool solveNQueensUtil(vector<vector<int>>& board, int col, int n, vector<vector<int>>& solutions) {
    if (col >= n) {
        vector<int> positions;
        for (const auto& row : board) {
            for (int i = 0; i < n; i++) {
                if (row[i] == 1) {
                    positions.push_back(i + 1);
                }
            }
        }
        solutions.push_back(positions);
        return true;
    }
    bool res = false;
    for (int i = 0; i < n; i++) {
        if (isSafe(board, i, col, n)) {
            board[i][col] = 1;
            res = solveNQueensUtil(board, col + 1, n, solutions) || res;
            board[i][col] = 0; // Backtrack
        }
    }
    return res;
}

void solveNQueens(int n) {
    vector<vector<int>> board(n, vector<int>(n, 0));
    vector<vector<int>> solutions;
    if (!solveNQueensUtil(board, 0, n, solutions)) {
        cout << "No solution exists" << endl;
    } else {
        cout << "Total number of solutions: " << solutions.size() << endl;
        for (int idx = 0; idx < solutions.size(); idx++) {
            cout << "Solution " << (idx + 1) << ": [ ";
            for (int pos : solutions[idx]) {
                cout << pos << " ";
            }
            cout << "]" << endl;
        }
    }
}

int main() {
    int n;
    cout << "Enter the value for queens: ";
    cin >> n;
    solveNQueens(n);
    return 0;
}

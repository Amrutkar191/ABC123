import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
import seaborn as sns
import matplotlib.pyplot as plt

data = pd.read_csv('uber.csv')

data=data.dropna()
data.head()

data.describe()

data= data.drop(['key','pickup_datetime'], axis=1)
data.info()

X = data.drop('fare_amount', axis=1)
y = data['fare_amount']

# Train-test split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

Q1 = data['fare_amount'].quantile(0.25)
Q3 = data['fare_amount'].quantile(0.75)
IQR = Q3 - Q1
data_no_outliers = data[~((data['fare_amount'] < (Q1 - 1.5 * IQR)) | (data['fare_amount'] > (Q3 + 1.5 * IQR)))]

sns.heatmap(data.corr(), annot=True, fmt='.2f', cmap='coolwarm')
plt.title('Correlation Matrix')
plt.show()

from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestRegressor

# Initialize and fit models
lr_model = LinearRegression().fit(X_train, y_train)
rf_model = RandomForestRegressor(random_state=42).fit(X_train, y_train)

from sklearn.metrics import mean_squared_error, r2_score

# Predictions
y_pred_lr = lr_model.predict(X_test)
y_pred_rf = rf_model.predict(X_test)

# Evaluate Linear Regression
lr_rmse = mean_squared_error(y_test, y_pred_lr, squared=False)
lr_r2 = r2_score(y_test, y_pred_lr)

# Evaluate Random Forest
rf_rmse = mean_squared_error(y_test, y_pred_rf, squared=False)
rf_r2 = r2_score(y_test, y_pred_rf)

# Print results
print(f'Linear Regression - RMSE: {lr_rmse:.2f}, R²: {lr_r2:.2f}')
print(f'Random Forest - RMSE: {rf_rmse:.2f}, R²: {rf_r2:.2f}')
Student Management

pragma solidity ^0.8.26;
contract student_management{
    
    struct Student
    {
        int stud_id;
        string Name;
        string department;
    }

    Student[] std;

    function set_std_detail(int stud_id, string memory Name, string memory department) public {
	     Student memory stud = Student(stud_id,Name,department);
         std.push(stud);
    }

    function Get_detail(int stud_id) public view returns(string memory,string memory){
	    for(uint i=0;i<std.length;i++)
         {
            Student memory stud = std[i];
            if(stud.stud_id==stud_id)
            {
                return(stud.Name,stud.department);
            }  
        }
        return("Not Found","Not Found");
    }
}

Bank Exp 4

// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.26;

// Contract to retrieve address and balance of owner, with deposit and withdraw functionality
contract MyContract {
    // Private state variable for the contract owner
    address private owner;

    // Constructor to set the owner as the address deploying the contract
    constructor() {
        owner = msg.sender;
    }

    // Function to get the owner's address
    function getOwner() public view returns (address) {
        return owner;
    }

    // Function to return the current balance of the owner's address
    function getBalance() public view returns (uint256) {
        return owner.balance;
    }

    // Function to deposit ether into the contract
    function deposit() public payable {
        require(msg.sender == owner, "Only the owner can deposit.");
        // Ether is automatically added to the contract's balance
    }

    // Function to withdraw ether from the contract
    function withdraw(uint amount) public {
        require(msg.sender == owner, "Only the owner can withdraw.");
        require(amount <= address(this).balance, "Insufficient balance in contract.");
        
        payable(owner).transfer(amount);
    }

    // Function to get the contract's balance
    function getContractBalance() public view returns (uint256) {
        return address(this).balance;
    }
}
